#
# List of errors that we ignore by default.  These are due either to configuration
# goof-ups or are somewhat intentional.  (For example ASM thinks it wants reflection
# even though we know that it doesn't because we never use those parts of ASM that
# need it.  But since ASM has method signatures that make reference to it, C1 will
# give errors.  For now we just mark these as ignored.)  The manner in which this
# file is structured ensures that masking these errors will not lead to real errors being
# accidentally masked, since in each case we identify the source of the error.  Thus
# if a new method, field, or class causes the error then that one will not be ignored.
#
# Note, it is convention to ensure that the hello, hello-cha, and hello-glibj tests
# report zero errors.  Thus if you see an error report generated by one of those tests
# then look at the resolutionReportFinal.conf in the .build/ directory, and copy the
# entry for the reported error into this file.
#
# There should at some point be a discussion about whether to mark each of these
# errors as FIXME's.  In principle we should have a tight enough story about what we
# pull in during compilation that no resolution errosr occur.  But that's just a
# principle and as with any principle it's subject to debate.  An alternative
# approach would be to say that some of these errors are irrelevant anyway since the
# methods that caused them get dead-code-eliminated anyway.  Hence the need for a
# discussion; there are many ways to view this.
#
# This file should be edited by hand.  Any decision to put a new entry in here should
# be traceable to a committer.
#
#

(
    {
        target = {
            class = javax/realtime/RealtimeThread;
            context = Root;
            resMode = UNRESOLVED;
        };
        uses = (
            {
                class = java/lang/VMThread;
                context = Root;
                member = "VMThread_createRT(IZ)Ljava/lang/VMThread;";
                resMode = RESOLVED;
            }
        );
    },
    {
        target = {
            class = javax/safetycritical/ThrowBoundaryError;
            context = Root;
        };
        uses = (
            {
                class = com/fiji/fivm/r1/MemoryAreas;
                context = Root;
                member = "MemoryArea_doRun(PLjava/lang/Runnable;)V";
            }
        );
    },
    {
        target = {
            class = javax/realtime/ThrowBoundaryError;
            context = Root;
        };
        uses = (
            {
                class = com/fiji/fivm/r1/MemoryAreas;
                context = Root;
                member = "MemoryArea_doRun(PLjava/lang/Runnable;)V";
            }
        );
    },
    {
        target = {
            class = java/nio/fivmSupport;
            context = Root;
            member = "makeVMBuffer(Ljava/nio/ByteBuffer;Ljava/nio/fivmSupport$MakeVMBufferMode;Ljava/nio/fivmSupport$ReadWriteMode;)Ljava/nio/ByteBuffer;";
        };
        uses = (
            {
                class = gnu/java/nio/FCNativeChannel;
                context = Root;
                member = "readImpl(ILjava/nio/ByteBuffer;)I";
            },
            {
                class = gnu/java/nio/FCNativeChannel;
                context = Root;
                member = "recv(ILjava/nio/ByteBuffer;)V";
            },
            {
                class = gnu/java/nio/FCNativeChannel;
                context = Root;
                member = "recvfrom(ILjava/nio/ByteBuffer;)Ljava/net/InetSocketAddress;";
            },
            {
                class = gnu/java/nio/FCNativeChannel;
                context = Root;
                member = "writeImpl(ILjava/nio/ByteBuffer;)I";
            },
            {
                class = gnu/java/nio/FCNativeChannel;
                context = Root;
                member = "send(ILjava/nio/ByteBuffer;)I";
            },
            {
                class = gnu/java/nio/FCNativeChannel;
                context = Root;
                member = "send(ILjava/nio/ByteBuffer;[BI)I";
            },
            {
                class = gnu/java/nio/FCNativeChannel;
                context = Root;
                member = "send6(ILjava/nio/ByteBuffer;[BI)I";
            }
        );
    },
    {
        target = {
            class = java/lang/FCProcess;
            context = Root;
        };
        uses = (
            {
                class = java/lang/FCRuntime;
                context = Root;
                member = "exec([Ljava/lang/String;[Ljava/lang/String;Ljava/io/File;)Ljava/lang/Process;";
            }
        );
    },
    {
        target = {
            class = java/nio/fivmSupport;
            context = Root;
            member = "positionAddress(Ljava/nio/ByteBuffer;)P";
        };
        uses = (
            {
                class = com/fiji/fivm/codegen/Assembler;
                context = Root;
                member = "getAbsolutePC()P";
            }
        );
    },
    {
        target = {
            class = java/nio/fivmSupport;
            context = Root;
            member = "positionAddress(Ljava/nio/ByteBuffer;I)P";
        };
        uses = (
            {
                class = com/fiji/fivm/codegen/Assembler;
                context = Root;
                member = "getAbsolutePC(I)P";
            }
        );
    },
    {
        target = {
            class = javax/realtime/RealtimeThread;
            context = Root;
        };
        uses = (
            {
                class =  java/lang/VMThread;
                context = Root;
                member = "VMThread_createRT(IZ)Ljava/lang/VMThread";
            }
        );
    }
)
