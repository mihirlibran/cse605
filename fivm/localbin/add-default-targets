#!/usr/bin/env ruby
#
# add-default-targets
# Copyright 2008, 2009, 2010, 2011, 2012, 2013 Fiji Systems Inc.
# This file is part of the FIJI VM Software licensed under the FIJI PUBLIC
# LICENSE Version 3 or any later version.  A copy of the FIJI PUBLIC LICENSE is
# available at fivm/LEGAL and can also be found at
# http://www.fiji-systems.com/FPL3.txt
# 
# By installing, reproducing, distributing, and/or using the FIJI VM Software
# you agree to the terms of the FIJI PUBLIC LICENSE.  You may exercise the
# rights granted under the FIJI PUBLIC LICENSE subject to the conditions and
# restrictions stated therein.  Among other conditions and restrictions, the
# FIJI PUBLIC LICENSE states that:
# 
# a. You may only make non-commercial use of the FIJI VM Software.
# 
# b. Any adaptation you make must be licensed under the same terms 
# of the FIJI PUBLIC LICENSE.
# 
# c. You must include a copy of the FIJI PUBLIC LICENSE in every copy of any
# file, adaptation or output code that you distribute and cause the output code
# to provide a notice of the FIJI PUBLIC LICENSE. 
# 
# d. You must not impose any additional conditions.
# 
# e. You must not assert or imply any connection, sponsorship or endorsement by
# the author of the FIJI VM Software
# 
# f. You must take no derogatory action in relation to the FIJI VM Software
# which would be prejudicial to the FIJI VM Software author's honor or
# reputation.
# 
# 
# The FIJI VM Software is provided as-is.  FIJI SYSTEMS INC does not make any
# representation and provides no warranty of any kind concerning the software.
# 
# The FIJI PUBLIC LICENSE and any rights granted therein terminate
# automatically upon any breach by you of the terms of the FIJI PUBLIC LICENSE.
#
#

require 'pathname'
require 'getoptlong'

meUnresolved=Pathname.new($0)
me=meUnresolved.realpath
bindir=me.dirname.realpath
$homedir=bindir.parent
$libdir=$homedir+"lib"

require ($libdir+"config.rb")
require ($libdir+"fijiconfig.rb")

def hasAlias(theAlias)
  Dir.new("lib/targets").each {
    | dir |
    if dir !~ /^\./ and FileTest.exist? "lib/targets/#{dir}/target.conf"
      if dir.upcase==theAlias.upcase
        return true
      else
        FijiConfig::parse(IO::read("lib/targets/#{dir}/target.conf"))["aliases"].each {
          | curAlias |
          if curAlias.upcase == theAlias.upcase
            return true
          end
        }
      end
    end
  }
  return false
end

if hasAlias("local-32") and
    hasAlias("local-64") and
    hasAlias("local") and
    hasAlias("default")
  puts "Already have all necessary targets and aliases.  Done."
  exit 0
end

good32=false
name32=nil
good64=false
name64=nil

$stderr.puts
$stderr.puts "Trying to configure 32-bit target..."

good32=system("#{$ruby} bin/add-target --ptr-size 32 --ignore-existing")
if good32
  name32=FijiConfig::parse(IO::read("target/target.conf"))["name"]
end

$stderr.puts
$stderr.puts "Trying to configure 64-bit target..."

good64=system("#{$ruby} bin/add-target --ptr-size 64 --ignore-existing")
if good64
  name64=FijiConfig::parse(IO::read("target/target.conf"))["name"]
end

puts

if good32
  puts "32-bit succeeded: #{name32}"
else
  puts "32-bit failed!"
end

if good64
  puts "64-bit succeeded: #{name64}"
else
  puts "64-bit failed!"
end

unless good32 or good64
  $stderr.puts "Failed to create default target (tried both 32-bit and 64-bit)."
  exit 1
end

def addAliases(target,aliases)
  conf=FijiConfig::parse(IO::read("lib/targets/#{target}/target.conf"))
  aliases.each {
    | theAlias |
    unless conf['aliases'].include? theAlias
      conf['aliases'] << theAlias
    end
  }
  File.open("lib/targets/#{target}/target.conf","w") {
    | outp |
    outp.puts(FijiConfig::dumpPrettyWithMsg(conf,"generated by localbin/add-default-targets"))
  }
end

addAliases(name32,["local-32"]) if good32
addAliases(name64,["local-64"]) if good64

if good32
  addAliases(name32,["default","local"])
else
  addAliases(name64,["default","local"])
end

