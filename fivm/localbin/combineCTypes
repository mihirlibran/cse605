#!/usr/bin/env ruby
#
# combineCTypes
# Copyright 2008, 2009, 2010, 2011, 2012, 2013 Fiji Systems Inc.
# This file is part of the FIJI VM Software licensed under the FIJI PUBLIC
# LICENSE Version 3 or any later version.  A copy of the FIJI PUBLIC LICENSE is
# available at fivm/LEGAL and can also be found at
# http://www.fiji-systems.com/FPL3.txt
# 
# By installing, reproducing, distributing, and/or using the FIJI VM Software
# you agree to the terms of the FIJI PUBLIC LICENSE.  You may exercise the
# rights granted under the FIJI PUBLIC LICENSE subject to the conditions and
# restrictions stated therein.  Among other conditions and restrictions, the
# FIJI PUBLIC LICENSE states that:
# 
# a. You may only make non-commercial use of the FIJI VM Software.
# 
# b. Any adaptation you make must be licensed under the same terms 
# of the FIJI PUBLIC LICENSE.
# 
# c. You must include a copy of the FIJI PUBLIC LICENSE in every copy of any
# file, adaptation or output code that you distribute and cause the output code
# to provide a notice of the FIJI PUBLIC LICENSE. 
# 
# d. You must not impose any additional conditions.
# 
# e. You must not assert or imply any connection, sponsorship or endorsement by
# the author of the FIJI VM Software
# 
# f. You must take no derogatory action in relation to the FIJI VM Software
# which would be prejudicial to the FIJI VM Software author's honor or
# reputation.
# 
# 
# The FIJI VM Software is provided as-is.  FIJI SYSTEMS INC does not make any
# representation and provides no warranty of any kind concerning the software.
# 
# The FIJI PUBLIC LICENSE and any rights granted therein terminate
# automatically upon any breach by you of the terms of the FIJI PUBLIC LICENSE.
#
#

require 'pathname'
require 'getoptlong'

meUnresolved=Pathname.new($0)
me=meUnresolved.realpath
bindir=me.dirname.realpath
$homedir=bindir.parent
$libdir=$homedir+"lib"

require ($libdir+"config.rb")
require ($libdir+"fijiconfig.rb")

def add(a,b)
  seen={}
  a.each {
    | entry |
    seen[entry['name']]=true
  }
  b.each {
    | entry |
    unless seen[entry['name']]
      a << entry
    end
  }
end

def addComponent(master,current,name)
  add(master[name],current[name])
end

master=FijiConfig::parse(IO::read(ARGV.shift))

ARGV.each {
  | flnm |
  current=FijiConfig::parse(IO::read(flnm))
  
  cfieldsToAdd=[]
  current['cfields'].each {
    | newEntry |
    found=false
    master['cfields'].each {
      | oldEntry |
      if oldEntry['name']==newEntry['name'] and
          oldEntry['struct']==newEntry['struct']
        if oldEntry['basetype']!=newEntry['basetype']
          $stderr.puts "Basetype mismatch on #{oldEntry['struct']}::#{oldEntry['name']}: old = #{oldEntry['basetype']}, new = #{newEntry['basetype']}"
          $stderr.puts "When processing #{flnm}"
          exit 1
        end
        if oldEntry['offsetof']!=newEntry['offsetof']
          $stderr.puts "Offsetof mismatch on #{oldEntry['struct']}::#{oldEntry['name']}: old = #{oldEntry['offsetof']}, new = #{newEntry['offsetof']}"
          $stderr.puts "When processing #{flnm}"
          exit 1
        end
        found=true
        break
      end
    }
    unless found
      cfieldsToAdd << newEntry
    end
  }
  master['cfields'] += cfieldsToAdd
  
  ctypesToAdd=[]
  current['ctypes'].each {
    | newEntry |
    found=false
    master['ctypes'].each {
      | oldEntry |
      if oldEntry['name']==newEntry['name']
        if oldEntry['sizeof']!=newEntry['sizeof']
          $stderr.puts "Sizeof mismatch on #{oldEntry['name']}: old = #{oldEntry['sizeof']}, new = #{newEntry['sizeof']}"
          $stderr.puts "When processing #{flnm}"
          exit 1
        end
        found=true
        break
      end
    }
    unless found
      ctypesToAdd << newEntry
    end
  }
  master['ctypes'] += ctypesToAdd
  
  addComponent(master,current,'godGivenCVars')
  addComponent(master,current,'godGivenFunctions')
  addComponent(master,current,'knownRemoteCGlobals')
  addComponent(master,current,'knownRemoteDataConstants')
}

puts FijiConfig::dumpPrettyWithMsg(master,"generated by localbin/combineCTypes")

