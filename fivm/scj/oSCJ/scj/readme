oSCJ README
----------------------------------------------------------------------------
Date: 12/30/2010
Author: Ales Plsek
HomePage: http://sss.cs.purdue.edu/projects/oscj/
Source-Code: http://code.google.com/p/scj-jsr302/
----------------------------------------------------------------------------






1)    SCJ versions:
------------------------------------------------
We have three different versions of SCJ:
1) SCJ running on top of RTSJ (we do not use this one anymore, it was only in the early beginnings of the project )
2) SCJ running on top of FijiVM
3) SCJ running on top of OVM

PREFER THE FijiVM VERSION! All the below applies for FijiVM.

All three version are now runnable, you can test them using either the SCJ HelloWorld example or 
the miniCDx benchmark.




3)  INSTALLATION:
------------------------------------------------
Installation itself is not difficult, you just need to checkout scj and ovm projects and use the dedicated makefile that is distributed with the scj project.

(for this you need to have account on ZED, if you dont have it, you need to wait for the official release of oSCJ)


3.0 Requirements
-----------------

OVM
-----
- needs Java 5 distribution to compile, install Java 5 and modify your PATH
- TODO:...




3.1) Checkout development version: SCJ-OVM
----------
Here are the instructions step by step:

1) choose an installation directory, e.g. "scj-ovm/" and cd "scj-ovm/"

2) checkout the following:
$ svn checkout svn+ssh://plsek@zed.cs.purdue.edu/exports/u119/sss/common/svn/ovm/branches/SCJ/OpenVM
$ svn checkout svn+ssh://plsek@zed.cs.purdue.edu/exports/u119/sss/common/svn/scj-project/scj
- just replace my login with yours...

3) Makefile
1) $ copy a "Makefile" from /scj/examples/ovm to "scj-ovm/"
2) modify OVM_HOME and OVM_BUILD variables to have absolute paths to the /scj

4) Java installation
- OVM needs Java5
- before running make, do
$ export PATH=JAVA5_dir/bin:$(PATH)

5) make
- this will compile SCJ, OVM, and helloworld example

6) Helloworld
- helloworld example is placed in scj/examples/helloworld
- type "make run" to run it.


3.3. Downloading an official distribution 
-------------------------

1. Download, untar the distribution into a directory:
e.g. /home/user/oscj

2 Edit Makefile
	- change the $HOME variable to the directory where you have installed the oSCJ \
	e.g. HOME=/home/user/oscj


3.3)  DISTRIBUTION DIRECTORY structure
-------------------------------------

#   		scj-ovm/	
#        		 OpenVM/       - check out OVM from : svn checkout  svn+ssh://plsek@zed.cs.purdue.edu/exports/u119/sss/common/svn/ovm/branches/SCJ/OpenVM
#         		 Makefile      - put the makefile from /scj/examples/ovm      
#                scj           - check out from: svn checkout svn+ssh://plsek@zed.cs.purdue.edu/exports/u119/sss/common/svn/scj-project/scj
#			        examples/	
#						hello/
#							build/     - contains .class files of the HelloWorld
#           				src/       - helloworld example sources in Java 4!
# 							ovm-config/  - contains configuration file for ovm, so far contains list of classes called by ovm reflectively
#						ovm/            -            	 
#							MAkefile    - this is the makefile that you need to copy into the root of scj-ovm/ project
#				build          -directory generated by OVM, OVM is build here for x86 platform
#				ovms           - OVM-build for different platforms, eg. LEON/RTEMS 
#				hw			   - SCJ applications builded for different then x86 platform
#									- for x86, OVM builds into e.g. ./oscj/scj/examples/helloworld/build
#				miniCDx-j4     - distribution of the SCJ miniCDx benchmark.
#


3.4 OVM and Makefile process
-----------------------------------

3.4.1 info
----------------

SCJ code is copied into OVM dir in: 
/ovm/src/syslib/user/ovm_scj
- the content of this directory is completely updated by the code from scj/ri.

The other SCJ related code is in dirs:
/ovm/src/syslib/user/ovm_classpath 
and
/ovm/src/syslib/user/ovm_platform
- these classes are part of OVM and are not distributed inside SCJ. They were however modified at some places to be compliant with SCJ.

NOTE:
SCJ code is in Java6, however, OVM is able to compile only Java4 code (and to do this, it is dependent on Java5, very tricky!)

Makefile process:
1. SCJ code transformed from J6 - > J4
2. SCJ J4 code copied to /ovm/src/syslib/user/ovm_scj
3. OVM compiled

4. Helloworld is compiled with OVM.
5. helloworld run.

3.4.2  Execute sequence:
-----------------------------
	1. make  - OVM, SCJ and Helloworld SCJ are compiled and finally HelloWorld is executed
	2. make cdx = cdx benchmark is executed
	


3.5)  SCJ-Fiji
--------------------
The installation procedure for FijiVM is similar, you will just use Makefile from "/examples/fiji" and there is no restriction on Java version.






4.) SOURCE_CODE STRUCTURE:
====================================================================================
The SCJ source codes are placed in scj/ri.
For your better orientation, the source code is divided into several categories:
4.1)
ri/spec - contains the core SCJ sources classes defined by the JSR-302 Spec
ri/s3 - contains our SCJ classes needed for our specific implementation of SCJ

4.2) Furthermore, in subdirectories there are some duplicated classes because their implementation differers depending on VM.
fiji - classes specific to fiji
ovm - classes specific to ovm
common - the majority of classes is independent from VM, so they are placed here.
- in scj/ and ovm/ projects are also configuration files for eclipse projects, so you can conveniently open them in Eclipse and you will clearly see the structure I am describing here. 


4.3) The RTSJ based version is in scj/ri_rtsj/







TODO-list
====================================================================================

Handler Start Time


Storage Parameters
------------------
- add checks 

Priority Parametesr
-----------
- change the priority when running?


List of exceptions?


LEVEL 0:
----------
Implement:
Level0Mission, Level0MissionSequencer
- remove CyclicExecutive!!!! 

Remove Methods
-------------------
- missionMemorySize()
- getInitialMission()


Annotations
-----------
- all the methods of the SCJ package thar are static should be annotated with @RunsIn(UNKNOWN)
- e.g. Mission.getCurrentMission();


